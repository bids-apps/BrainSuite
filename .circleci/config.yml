version: 2
jobs:
  get_data:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/data
    steps:
      - restore_cache:
          keys:
            - data-v3-{{ .Revision }}
            - data-v3-
      - run:
          name: Get ds114_test1
          command: |
            mkdir -p /tmp/data
            if [[ ! -d /tmp/data/ds114_test1 ]]; then
              wget -c -O ~/ds114_test1.tar \
              "https://files.osf.io/v1/resources/9q7dv/providers/osfstorage/57e54a326c613b01d7d3ed90" && \
              tar xf ~/ds114_test1.tar -C /tmp/data && \
              rm ~/ds114_test1.tar;
            else
              echo "ds114_test1 was cached"
            fi
      - run:
          name: Get ds114_test2
          command: |
            mkdir -p /tmp/data
            if [[ ! -d /tmp/data/ds114_test2 ]]; then
              wget -c -O ~/ds114_test2.tar \
              "https://files.osf.io/v1/resources/9q7dv/providers/osfstorage/57e549f9b83f6901d457d162" && \
              tar xf ~/ds114_test2.tar -C /tmp/data && \
              rm ~/ds114_test2.tar;
            else
              echo "ds114_test2 was cached"
            fi
   build:
    docker:
      - image: docker:18.01.0-ce-git
    steps:
      - checkout
      - run:
          name: Install parallel gzip
          command: |
            apk add --no-cache pigz
      - restore_cache:
          keys:
            - docker-v2-{{ .Branch }}-{{ .Revision }}
            - docker-v2-{{ .Branch }}-
            - docker-v2-master-
            - docker-v2-
          paths:
            - /tmp/cache/docker.tar.gz
      - setup_remote_docker
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
            else
              echo "No docker cache found"
            fi
            docker images
      - run:
          name: get version
          command: |
            git describe --tags --always > version
            cat version
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            docker images
            set +o pipefail
            docker build --cache-from=bids/${CIRCLE_PROJECT_REPONAME} \
            -t bids/${CIRCLE_PROJECT_REPONAME}:latest .
            docker images
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            mkdir -p /tmp/cache
            set +o pipefail
            docker save bids/${CIRCLE_PROJECT_REPONAME}:latest \
              | pigz -2 -p 3 > /tmp/cache/docker.tar.gz
      - save_cache:
           key: docker-v2-{{ .Branch }}-{{ epoch }}
           paths:
             - /tmp/cache/docker.tar.gz
      # Usage and version
      - run:
          name: Usage BIDS
          command: docker run -ti --rm bids/${CIRCLE_PROJECT_REPONAME}:latest -h

  test:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/data
    environment:
      - DATADIR: '/tmp/data'
      - OUTDIR: '/tmp/outputs'
    steps:
      - run:
          name: Install parallel gzip
          command: |
            sudo apt-get update && sudo apt-get install -y pigz
      - restore_cache:
          keys:
            - docker-v2-{{ .Branch }}-{{ .Revision }}
            - docker-v2-{{ .Branch }}-
            - docker-v2-master-
            - docker-v2-
          paths:
            - /tmp/cache/docker.tar.gz
      - restore_cache:
          keys:
            - data-v3-{{ .Revision }}
            - data-v3-

      # Load Docker
      - run:
          name: Load Docker
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
            docker images
      - run:
          name: make output directory
          command: mkdir -p ${OUTDIR}

      # Test 1: ds114_test1
      - run:
          name: Test 1 ds114_test1 - CSE
          command: |
            docker run --rm -ti -v ${DATADIR}/ds114_test1:/data \
            -v ${OUTDIR}/ds114_test1/:/output \
            bids/${CIRCLE_PROJECT_REPONAME}:latest \
            /data /output participant --participant_label 01 --stages CSE
      - run:
          name: Test 1 ds114_test1 - BDP
          command: |
            docker run --rm -ti -v ${DATADIR}/ds114_test1:/data \
            -v ${OUTDIR}/ds114_test1/:/output \
            bids/${CIRCLE_PROJECT_REPONAME}:latest \
            /data /output participant --participant_label 01 --stages BDP

   deploy:
    machine:
      image: circleci/classic:201711-01
    steps:
      - run:
          name: Install parallel gzip
          command: |
            sudo apt-get update && sudo apt-get install -y pigz
      - restore_cache:
          keys:
            - docker-v2-{{ .Branch }}-{{ .Revision }}
            - docker-v2-{{ .Branch }}-
            - docker-v2-master-
            - docker-v2-
          paths:
            - /tmp/cache/docker.tar.gz

      # Load Docker
      - run:
          name: Load Docker
          no_output_timeout: 30m
          command: |
            docker info
            set +o pipefail
            pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
            docker images
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag bids/${CIRCLE_PROJECT_REPONAME} bids/${CIRCLE_PROJECT_REPONAME}:unstable
              docker push bids/${CIRCLE_PROJECT_REPONAME}:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push bids/${CIRCLE_PROJECT_REPONAME}:latest
                docker tag bids/${CIRCLE_PROJECT_REPONAME} bids/${CIRCLE_PROJECT_REPONAME}:$CIRCLE_TAG
                docker push bids/${CIRCLE_PROJECT_REPONAME}:$CIRCLE_TAG
              fi
            fi
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - get_data:
          filters:
            tags:
              only: /.*/
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - get_data
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master
            tags:
              only: /.*/